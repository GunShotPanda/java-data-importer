{
    "source":{
        "datasource":"impala0",
        "queryCommand":"SELECT tcp.r_stattime, tcp.traffic_up, tcp.traffic_dn, tcp.tcpdatapackage_up, tcp.tcpdatapackage_dn , tcp.tcpconnect_count, tcp.tcpsuccessconnect_count, tcp.tcpdatapackage_count, tcp.tcpretransmit_count, tcp.shakehands_delay , tcp.client_delay, tcp.server_delay, http.firstbyte_loadingtime, http.http_delay, http.httpgettimes , http.httpgetsuctimes, http.httpposttimes, http.httppostsuctimes, http.responsetimes, http.responsesuctimes , http.responseerrortimes, http.responseredirecttimes, tcp.nodetime, tcp.endtime, tcp.device_type , tcp.device_id, tcp.TCPSUCCESSCONNECT_RATE, tcp.TCP_RETRANSMIT_RATE, http.REDIRECT_RATE, http.NORMAL_RESPONSE_SUC_RATE , http.HTTPGET_RATE, http.HTTPPOST_RATE, tcp.TCPUPDATAPKGS, tcp.TCPUPRECON, tcp.TCPDOWNDATAPKGS , tcp.TCPDOWNRECON, tcp.FIRSTHANDSHAKESYN_COUNT, tcp.SECONDHANDSHAKESYNACK_COUNT, tcp.THIRDHANDSHAKEACK_COUNT, http.HTTPREQUEST_DELAY , http.HTTPRESP_DELAY, http.HTTPLOAD_DELAY, tcp.TCP_CONNECT_SUC_COUNT, http.HTTP_SESSION_SUC_COUNT, device.DEVICE_NAME , radius.USERACCESSSUCCOUNT, radius.USERACCESSFAILCOUNT, radius.USERACCESSALLCOUNT, radius.ABNORMALOFFLINECOUNT, radius_offLink.USERLOSECONNECTCOUNT , radius.USERONLINECOUNT, http.HTTPREQCOUNT FROM(SELECT tcp.statistical_start_time AS 'r_stattime', SUM(ISNULL(tcp.ul_ip_len, 0)) AS 'traffic_up' , SUM(ISNULL(tcp.dl_ip_len, 0)) AS 'traffic_dn' , SUM(ISNULL(tcp.tcp_ul_packet_count, 0)) AS 'tcpdatapackage_up' , SUM(ISNULL(tcp.tcp_dl_packet_count, 0)) AS 'tcpdatapackage_dn' , SUM(ISNULL(tcp.tcp_link_count, 0)) AS 'tcpconnect_count' , SUM(ISNULL(tcp.tcp_link_success_count, 0)) AS 'tcpsuccessconnect_count' , SUM(ISNULL(tcp.tcp_ul_packet_count, 0)) + SUM(ISNULL(tcp.tcp_dl_packet_count, 0)) AS 'tcpdatapackage_count' , SUM(ISNULL(tcp.tcp_ul_retrans_count, 0)) + SUM(ISNULL(tcp.tcp_dl_retrans_count, 0)) AS 'tcpretransmit_count' , CASE WHEN SUM(ISNULL(tcp.tcp_link_time_delay_count, 0)) != 0 THEN SUM(ISNULL(tcp.tcp_link_time_delay_sum, 0)) / SUM(ISNULL(tcp.tcp_link_time_delay_count, 0)) ELSE 0 END AS 'shakehands_delay' , CASE WHEN SUM(ISNULL(tcp.tcp_client_time_delay_count, 0)) != 0 THEN SUM(ISNULL(tcp.tcp_client_time_delay_sum, 0)) / SUM(ISNULL(tcp.tcp_client_time_delay_count, 0)) ELSE 0 END AS 'client_delay' , CASE WHEN SUM(ISNULL(tcp.tcp_server_time_delay_count, 0)) != 0 THEN SUM(ISNULL(tcp.tcp_server_time_delay_sum, 0)) / SUM(ISNULL(tcp.tcp_server_time_delay_count, 0)) ELSE 0 END AS 'server_delay', tcp.statistical_start_time AS 'nodetime', tcp.statistical_end_time AS 'endtime', tcp.olt_device_type AS 'device_type', tcp.olt_device_id AS 'device_id' , SUM(ISNULL(tcp.tcp_ul_packet_count, 0)) AS 'TCPUPDATAPKGS' , SUM(ISNULL(tcp.tcp_ul_retrans_count, 0)) AS 'TCPUPRECON' , SUM(ISNULL(tcp.tcp_dl_packet_count, 0)) AS 'TCPDOWNDATAPKGS' , SUM(ISNULL(tcp.tcp_dl_retrans_count, 0)) AS 'TCPDOWNRECON' , SUM(ISNULL(tcp.tcp_1_handshake_syn_count, 0)) AS 'FIRSTHANDSHAKESYN_COUNT' , SUM(ISNULL(tcp.tcp_2_handshake_syn_ack_count, 0)) AS 'SECONDHANDSHAKESYNACK_COUNT' , SUM(ISNULL(tcp.tcp_3_handshake_ack_count, 0)) AS 'THIRDHANDSHAKEACK_COUNT' , SUM(ISNULL(tcp.tcp_link_count, 0)) AS 'TCP_CONNECT_SUC_COUNT' , CASE WHEN SUM(ISNULL(tcp.tcp_link_count, 0)) != 0 THEN SUM(ISNULL(tcp.tcp_link_success_count, 0)) / SUM(ISNULL(tcp.tcp_link_count, 0)) * 100 ELSE 0 END AS 'TCPSUCCESSCONNECT_RATE' , CASE WHEN SUM(ISNULL(tcp.tcp_ul_packet_count, 0)) + SUM(ISNULL(tcp.tcp_dl_packet_count, 0)) != 0 THEN (SUM(ISNULL(tcp.tcp_ul_retrans_count, 0)) + SUM(ISNULL(tcp.tcp_dl_retrans_count, 0))) / (SUM(ISNULL(tcp.tcp_ul_packet_count, 0)) + SUM(ISNULL(tcp.tcp_dl_packet_count, 0))) * 100 ELSE 0 END AS 'TCP_RETRANSMIT_RATE' FROM gemstack.wb_total_kpi_15m_device_app tcp WHERE slicetime >= ? AND ?> slicetime GROUP BY 1, 13, 14, 15, 16) tcp JOIN (SELECT http.statistical_start_time AS 'r_stattime', http.statistical_start_time AS 'nodetime', http.statistical_end_time AS 'endtime', http.olt_device_type AS 'device_type', http.olt_device_id AS 'device_id' , CASE WHEN SUM(ISNULL(http.http_first_byte_delay_count, 0)) != 0 THEN SUM(ISNULL(http.http_first_byte_delay_sum, 0)) / SUM(ISNULL(http.http_first_byte_delay_count, 0)) ELSE 0 END AS 'firstbyte_loadingtime' , CASE WHEN SUM(ISNULL(http.http_response_time_delay_count, 0)) != 0 THEN SUM(ISNULL(http.http_response_time_delay_sum, 0)) / SUM(ISNULL(http.http_response_time_delay_count, 0)) ELSE 0 END AS 'http_delay', SUM(ISNULL(http.http_get_request_count, 0)) AS 'httpgettimes' , SUM(ISNULL(http.http_get_success_count, 0)) AS 'httpgetsuctimes' , SUM(ISNULL(http.http_post_request_count, 0)) AS 'httpposttimes' , SUM(ISNULL(http.http_post_success_count, 0)) AS 'httppostsuctimes' , SUM(ISNULL(http.http_request_count, 0)) AS 'responsetimes' , SUM(ISNULL(http.http_reply_success_count, 0)) AS 'responsesuctimes' , SUM(ISNULL(http.http_reply_fail_count, 0)) AS 'responseerrortimes' , SUM(ISNULL(http.http_reply_redirect_count, 0)) AS 'responseredirecttimes' , CASE WHEN SUM(ISNULL(http.http_request_time_delay_count, 0)) != 0 THEN SUM(ISNULL(http.http_request_time_delay_sum, 0)) / SUM(ISNULL(http.http_request_time_delay_count, 0)) ELSE 0 END AS 'HTTPREQUEST_DELAY' , CASE WHEN SUM(ISNULL(http.http_response_time_delay_count, 0)) != 0 THEN SUM(ISNULL(http.http_response_time_delay_sum, 0)) / SUM(ISNULL(http.http_response_time_delay_count, 0)) ELSE 0 END AS 'HTTPRESP_DELAY' , CASE WHEN SUM(ISNULL(http.http_load_time_delay_count, 0)) != 0 THEN SUM(ISNULL(http.http_load_time_delay_sum, 0)) / SUM(ISNULL(http.http_load_time_delay_count, 0)) ELSE 0 END AS 'HTTPLOAD_DELAY', SUM(ISNULL(http.http_session_count, 0)) AS 'HTTP_SESSION_SUC_COUNT' , SUM(ISNULL(http.http_request_count, 0)) AS 'HTTPREQCOUNT' , CASE WHEN SUM(ISNULL(http.http_request_count, 0)) != 0 THEN SUM(ISNULL(http.http_reply_redirect_count, 0)) / SUM(ISNULL(http.http_request_count, 0)) * 100 ELSE 0 END AS 'REDIRECT_RATE' , CASE WHEN SUM(ISNULL(http.http_request_count, 0)) != 0 THEN SUM(ISNULL(http.http_response_success_count, 0)) / SUM(ISNULL(http.http_request_count, 0)) * 100 ELSE 0 END AS 'NORMAL_RESPONSE_SUC_RATE' , CASE WHEN SUM(ISNULL(http.http_get_request_count, 0)) != 0 THEN SUM(ISNULL(http.http_get_success_count, 0)) / SUM(ISNULL(http.http_get_request_count, 0)) * 100 ELSE 0 END AS 'HTTPGET_RATE' , CASE WHEN SUM(ISNULL(http.http_post_request_count, 0)) != 0 THEN SUM(ISNULL(http.http_post_success_count, 0)) / SUM(ISNULL(http.http_post_request_count, 0)) * 100 ELSE 0 END AS 'HTTPPOST_RATE' FROM gemstack.wb_http_kpi_15m_device_app http WHERE slicetime >= ? AND ?> slicetime GROUP BY 1, 2, 3, 4, 5) http JOIN (SELECT radius.statistical_start_time AS 'r_stattime', radius.statistical_start_time AS 'nodetime', radius.statistical_end_time AS 'endtime', radius.olt_device_type AS 'device_type', radius.olt_device_id AS 'device_id' , SUM(ISNULL(radius.radius_dialing_success_count_non_user_cause, 0)) AS 'USERACCESSSUCCOUNT' , SUM(ISNULL(radius.radius_dialing_fail_count, 0)) AS 'USERACCESSFAILCOUNT' , SUM(ISNULL(radius.radius_dialing_total_count, 0)) AS 'USERACCESSALLCOUNT' , SUM(ISNULL(radius.radius_user_offline_count, 0)) AS 'ABNORMALOFFLINECOUNT' , SUM(ISNULL(radius.radius_online_user_count, 0)) AS 'USERONLINECOUNT' FROM gemstack.wb_radius_kpi_15m_device radius WHERE slicetime >= ? AND ?> slicetime GROUP BY 1, 2, 3, 4, 5 ) radius JOIN (SELECT action_time, olt_id, count(user_account) AS 'USERLOSECONNECTCOUNT' FROM gemstack.wb_radius_15m_off_link_user WHERE slicetime >= ? AND ?> slicetime GROUP BY 1, 2) radius_offLink JOIN (SELECT CAST(id AS string) AS 'id', CAST(device_type AS string) AS 'device_type', name AS 'DEVICE_NAME' FROM gemstack.gemstack_devices ) device ON tcp.r_stattime = http.r_stattime AND tcp.r_stattime = radius.r_stattime AND tcp.endtime = http.endtime AND tcp.endtime = radius.endtime AND tcp.device_type = http.device_type AND tcp.device_type = radius.device_type AND tcp.device_type = device.device_type AND tcp.device_type = '4' AND tcp.device_id = http.device_id AND tcp.device_id = radius.device_id AND tcp.device_id = device.id AND tcp.device_id = radius_offLink.olt_id AND CAST(CAST(from_unixtime(CAST(tcp.r_stattime AS BIGINT), 'yyyyMMddHHmm') AS STRING) AS BIGINT) = ?",
        "firstQueryCommand":"",
        "trigger":{
            "timer":{
                "updateInterval":"15"
            },
            "messager":{
                "msgID":""
            }
        },
        "time":{
            "trim":{
                "mode":"MINUTE",
                "minute":"15"
            },
            "delay":"45",
            "timeslot":"15"
        }
    },
    "dest":[
	    {
            "type":"mysql",
            "datasource":"mysql1",
            "actions":[
                {
                    "sqlCommand":"INSERT INTO q_report_flow_devicequota_olt VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                    "columns":[
          			      "r_stattime",
                          "traffic_up",
                          "traffic_dn",
                          "tcpdatapackage_up",
                          "tcpdatapackage_dn",
                          "tcpconnect_count",
                          "tcpsuccessconnect_count",
                          "tcpdatapackage_count",
                          "tcpretransmit_count",
                          "shakehands_delay",
                          "client_delay",
                          "server_delay",
                          "firstbyte_loadingtime",
                          "http_delay",
                          "httpgettimes",
                          "httpgetsuctimes",
                          "httpposttimes",
                          "httppostsuctimes",
                          "responsetimes",
                          "responsesuctimes",
                          "responseerrortimes",
                          "responseredirecttimes",
                          "nodetime",
                          "endtime",
                          "device_type",
                          "device_id",
                          "TCPSUCCESSCONNECT_RATE",
                          "TCP_RETRANSMIT_RATE",
                          "REDIRECT_RATE",
                          "NORMAL_RESPONSE_SUC_RATE",
                          "HTTPGET_RATE",
                          "HTTPPOST_RATE",
                          "TCPUPDATAPKGS",
                          "TCPUPRECON",
                          "TCPDOWNDATAPKGS",
                          "TCPDOWNRECON",
                          "FIRSTHANDSHAKESYN_COUNT",
                          "SECONDHANDSHAKESYNACK_COUNT",
                          "THIRDHANDSHAKEACK_COUNT",
                          "HTTPREQUEST_DELAY",
                          "HTTPRESP_DELAY",
                          "HTTPLOAD_DELAY",
                          "TCP_CONNECT_SUC_COUNT",
                          "HTTP_SESSION_SUC_COUNT",
                          "DEVICE_NAME",
                          "USERACCESSSUCCOUNT",
                          "USERACCESSFAILCOUNT",
                          "USERACCESSALLCOUNT",
                          "ABNORMALOFFLINECOUNT",
                          "USERLOSECONNECTCOUNT",
                          "USERONLINECOUNT",
                          "HTTPREQCOUNT"
                    ]
                }
            ]
        },
        {
            "type":"sqlserver",
            "datasource":"sqlserver0",
            "actions":[
                {
                    "sqlCommand":"INSERT INTO q_report_flow_devicequota_olt VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                    "columns":[
          			      "r_stattime",
                          "traffic_up",
                          "traffic_dn",
                          "tcpdatapackage_up",
                          "tcpdatapackage_dn",
                          "tcpconnect_count",
                          "tcpsuccessconnect_count",
                          "tcpdatapackage_count",
                          "tcpretransmit_count",
                          "shakehands_delay",
                          "client_delay",
                          "server_delay",
                          "firstbyte_loadingtime",
                          "http_delay",
                          "httpgettimes",
                          "httpgetsuctimes",
                          "httpposttimes",
                          "httppostsuctimes",
                          "responsetimes",
                          "responsesuctimes",
                          "responseerrortimes",
                          "responseredirecttimes",
                          "nodetime",
                          "endtime",
                          "device_type",
                          "device_id",
                          "TCPSUCCESSCONNECT_RATE",
                          "TCP_RETRANSMIT_RATE",
                          "REDIRECT_RATE",
                          "NORMAL_RESPONSE_SUC_RATE",
                          "HTTPGET_RATE",
                          "HTTPPOST_RATE",
                          "TCPUPDATAPKGS",
                          "TCPUPRECON",
                          "TCPDOWNDATAPKGS",
                          "TCPDOWNRECON",
                          "FIRSTHANDSHAKESYN_COUNT",
                          "SECONDHANDSHAKESYNACK_COUNT",
                          "THIRDHANDSHAKEACK_COUNT",
                          "HTTPREQUEST_DELAY",
                          "HTTPRESP_DELAY",
                          "HTTPLOAD_DELAY",
                          "TCP_CONNECT_SUC_COUNT",
                          "HTTP_SESSION_SUC_COUNT",
                          "DEVICE_NAME",
                          "USERACCESSSUCCOUNT",
                          "USERACCESSFAILCOUNT",
                          "USERACCESSALLCOUNT",
                          "ABNORMALOFFLINECOUNT",
                          "USERLOSECONNECTCOUNT",
                          "USERONLINECOUNT",
                          "HTTPREQCOUNT"
                    ]
                }
            ]
        },
        {
            "type":"FileSystem",
            "actions":[
                {
                    "datasource":"fileSys2",
                    "filename":"网调_11_q_report_flow_devicequota_olt-%startTime:yyyyMMddHHmm%_%endTime:yyyyMMddHHmm%",
                    "finishedFilename":"网调_11_q_report_flow_devicequota_olt-%startTime:yyyyMMddHHmm%_%endTime:yyyyMMddHHmm%",
                    "compressor":""
                }
            ]
        }
    ]
}